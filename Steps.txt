npx create-react-app <name>
npm start
npm install react-bootstrap bootstrap
add import 'bootstrap/dist/css/bootstrap.min.css'; to index
install router
npm install react-router-dom

makinng a page 
make Login.js in src 
add code 
function Login(){
    return (
        <div>
        OK
        </div>
    )
}
export default Login


In App.js

import Header from './Header';

function App() {
  return (
    <div className="App">
      <Header />
    </div>
  );
}

import { BrowserRouter } from 'react-router-dom';


Add this line in header 
   <Link to="/login">Login</Link>

This in app.js
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Login from './Login'

 <Router>
    <Header />
      <Routes>
        <Route path="/login" element={<Login />} />
      </Routes>
    </Router>






react hooks should always be in a function not in any loop, if condition or class

react hooks should always be called in same order

example -> useState hook
useState syntax

   const <array> = useState(<defaultvalue>)
   const [currentState,function that updates current state] = useState(<defaultvalue>)

eg const [count,setCount] = useCount(0)


How an function submit looks like 

  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const redirect = useNavigate();

  async function signUp() {
    let data = { name, email, password };
    let result = await fetch("http://127.0.0.1:8000/api/create-user", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
      },
      body: JSON.stringify(data),
    });
    result=await result.json();
    console.warn("result",result);
    localStorage.setItem('details',JSON.stringify(result))
    redirect('/add')
  }

  return (
    <Form className="col-6 m-auto text-start">
      <h1>Register</h1>

      <Form.Group className="mb-3" controlId="formBasicName">
        <Form.Label>Name</Form.Label>
        <Form.Control
          type="text"
          placeholder="Enter Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
      </Form.Group>

  .....




